{
  "name": "react-input-field",
  "version": "1.2.2",
  "description": "React Input Field",
  "main": "lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/zippyui/react-input-field.git"
  },
  "scripts": {
    "test": "make",
    "lib": "gulp",
    "build-style": "webpack --progress --colors --config build-style.config.js",
    "dist": "webpack --progress --colors --config dist.config.js",
    "dist.min": "webpack --progress --colors --optimize-minimize --optimize-occurence-order --optimize-dedupe --config dist.min.config.js",
    "build": "npm run lib && npm run dist && npm run dist.min && npm run build-style",
    "dev": "webpack-dev-server --progress --colors --port 9090"
  },
  "devDependencies": {
    "babel-core": "^5.4.3",
    "babel-loader": "^5.1.2",
    "babel-plugin-closure-elimination": "0.0.1",
    "css-loader": "^0.9.0",
    "extract-text-webpack-plugin": "^0.3.5",
    "gulp": "^3.8.10",
    "gulp-babel": "^5.1.0",
    "gulp-react": "^2.0.0",
    "http-server": "^0.7.3",
    "jsx-loader": "^0.12.2",
    "node-libs-browser": "^0.5.0",
    "style-loader": "^0.8.2",
    "stylus-loader": "^0.4.0",
    "webpack": "^1.9.7",
    "webpack-dev-server": "^1.8.2"
  },
  "dependencies": {
    "normalize.css": "^3.0.2",
    "object-assign": "^2.0.0",
    "react-style-normalizer": "^1.2.8"
  },
  "peerDependencies": {
    "react": ">=0.12.0"
  },
  "keywords": [
    "input",
    "field",
    "textfield",
    "text",
    "react-component",
    "text-field",
    "input-field",
    "react"
  ],
  "author": {
    "name": "ZippyUI",
    "email": "contact@zippyui.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/zippyui/react-input-field/issues"
  },
  "homepage": "https://github.com/zippyui/react-input-field",
  "readme": "react-input-field\n=================\n\n> A carefully crafted input field for React\n\n## Features\n\n * support for clear tool\n * validation, emptyness & associated styles\n * custom styling & events\n\n## Example\n\n```jsx\n\nvar Field = require('react-input-field')\n\nvar VALUE = 'initial value'\n\nvar App = React.createClass({\n\n    // ********\n    // NOTE: the first argument is the new value, NOT the event\n    // ********\n    handleChange: function(value){\n        VALUE = value\n        this.setState({})\n    },\n\n    render: function(){\n\n        function validate(value){\n            return value !== ''\n        }\n\n        return <Field onChange={this.handleChange} validate={validate} />\n    }\n})\n\nReact.render(<App />, document.body)\n```\n\n## NOTE\n\nUnlike normal `<input>` fields (React.DOM.input), `react-input-field` calls the `onChange` handler with the input value being the first arg!\n\n```jsx\nfunction onChange(value, fieldProps, event){\n  console.log(value)\n}\n\n<Field onChange={onChange} />\n```\n\n## Properties\n\n * onChange(value: String, props: Object, event: Event) - a function to be called when the input value changes\n * placeholder: String - a placeholder for the input\n * readOnly: Boolean - the value for the readonly attribute for the input field\n * autoFocus: Boolean - the value of the autoFocus attribute for the input\n * clearTool: Boolean/String/ReactElement - defaults to true. Whether to show a clear tool or not when field value is not empty. If the boolean true, âœ– will be rendered as a clear tool, otherwise, the given value will be used.\n * validate: Function - if given, it will be called with the value of the field. If it returns false, the field will have a css class that marks it as invalid (defaults to props.invalidClassName='z-invalid')\n  * clearToolStyle: Object - a style for the clear tool\n  * clearToolColor: String - a color for the clear tool\n  * clearToolOverColor: String - a color for the clear tool, when hovered\n  * onClearToolClick: Function(value: String, props: Object, event: Event)\n  * emptyValue: String/Function\n  * isEmpty: Function\n  * onValidityChange: Function(valid: boolean, value, props) - function called when the validity changes\n  * toolsPosition: String - defaults to 'right'. Can also be 'left'\n  * invalidStyle: Object  - style to be applied when the field is invalid\n  * name: String - the value of the name attribute for the field\n  * onFocus: Function(event)\n  * onBlur: Function(event)\n  * onKeyUp: Function(event) ... etc and all onKeyXXX events\n\n## Look & feel\n\n### Styling with className\n\n * className - a class name to be applied to the component\n * emptyClassName - a class name to be applied to the component, when the value is empty (as determined by `isEmpty` prop - default implementation is `value == null`)\n * invalidClassName - a class name to be applied to the component when it has an invalid value (as determined by the `validate` function prop)\n\n### Styling with style object\n\n* style - styles to be applied to the component\n* emptyStyle - styles to be applied to the component when the value is empty\n* invalidStyle - styles to be applied to the component when the value is invalid (as determined by the `validate` function prop)\n* focusedStyle - styles to be applied to the component when it is focused\n\n## Validation\n\nIn order to perform validation, simply provide a `validate` function.\n\nExample:\n\n```jsx\n\nfunction validate(value, props){\n  return value === \"\"\n}\n\n<Field validate={validate} defaultValue=\"test\" />\n```\n\nWhen `validate` returns false, `invalidClassName` and `invalidStyle` are applied.\n\n## Input props\n\nConfiguring the `<input />` directly can be done using the `inputProps` prop (because style, emptyStyle, emptyClassName, etc... are applied to the wrapping div, not the `input` itself)\n\n * inputProps\n\nExample\n\n```jsx\n<Field inputProps={{type: 'tel'}} />\n```\n\nBut most of the time you wont need to use `inputProps` directly.\n\nExample - no need to specify the `onFocus` callback on `inputProps`, since it is called due to event delegation.\n\n```jsx\nfunction onFocus(event){\n    //called on input focus\n}\n\n<Field onFocus={onFocus} />\n```\n * inputStyle\n\n ```jsx\n <Field inputStyle={{color: 'blue'}} />\n ```\n\n * inputInvalidStyle\n * inputEmptyStyle\n\n## Contributing\n\nUse [Github issues](https://github.com/zippyui/react-input-field/issues) for feature requests and bug reports.\n\nWe actively welcome pull requests.\n\nFor setting up & starting the project locally, use:\n\n```sh\n$ git clone https://github.com/zippyui/react-input-field\n$ cd react-input-field\n$ npm install\n$ npm dev\n```\n\nNow navigate to [localhost:9090](http://localhost:9090/)\n\nBefore building a new version, make sure you run\n\n```sh\n$ npm run build\n```\nwhich compiles the `src` folder (which contains jsx files) into the `lib` folder (only valid EcmaScript 5 files).\n\n## License\n\n#### MIT\n",
  "readmeFilename": "README.md",
  "gitHead": "dc6d8520d10cf731712833b6759cdb8f5ed8da0a",
  "_id": "react-input-field@1.2.2",
  "_shasum": "8c629d6b8cb8aed6eac0c7cd0dcd20272fb170e9",
  "_from": "react-input-field@latest"
}
